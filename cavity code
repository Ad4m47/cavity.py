# -*- coding: utf-8 -*-@@ -5,7 +5,7 @@
"""
 A python program for using the main principle of perturbation theory to predic 
 the coupling streght between cavity magnon polaritons detailed in:
 Macêdo, Rair, Rory C. Holland, Paul G. Baity, Karen L. Livesey, 
 Rair Macêdo, Rory C. Holland, Paul G. Baity, Luke J. McLellan, Karen L. Livesey, 
 Robert L. Stamps, Martin P. Weides, and Dmytro A. Bozhko. "An electromagnetic 
 approach to cavity spintronics" Phys. Rev. Applied (In press)/arXiv:2007.11483
 While this program can be easily modified for different systems, we recommend 
 to start using the it in combination with the article above in order to 
 understand the different features presented as well as to better undestand 
 how to relate the quatities calculated and parameters given to other systems. 
 
 Here you'll find:
    * Calculation of the coupling using analytical solutions for the field 
      profiles in a rectangular microwave cavity. This include plots of (a) the 
      field profile (b) the eigenfrequencies of the system, (c) the coupling as 
      a function of x,y positions and (d) the coupling as a fuction of y 
      position at x = 27 mm (anti-node of the cavity's magnetic field). 
    * Eigenfrequencies for a 2D resonator (coplanar waveguide) coupled to a Py 
      film with field and energies inputs from COMSOL.
      
    * S11 parameter calculations.
    
 A few additional points worthy of note: 
 
    * Note that throughout this file, parameters are given for the relevant 
      sections and these might be updated with different names later in the 
      file for different sytems. 
    * This code is written sequentially so that sections can be deleted 
      bottom-up. Therefore, if sections are deleted top-down or from the middle
      the code might not run properly--or at all.
      
 If you use this for any work you might publish, could you please send an email 
 to: Rair.Macedo@Glasgow.ac.uk with an appropriate reference to your work.
*******************************************************************************
 Las updated on Jan 28, 2021
 
*******************************************************************************
"""
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
#%%
"""
*******************************************************************************
    Coupling in a 3D rectangular cavity
    
    This section reproduces the data given in Figure 2 of the article.
******************************************************************************* 

We start by calculating the oscillating magnetic field, hc, profile inside 
    the cavity, using the Equations provided in Appendix B. The cavity 
    dimensions are:
        """

a = 50 * 1e-3 # m
b = 50.0 * 1e-3 # m
c = 5 * 1e-3 # m
""" You can change a, b, and, c to obtain other cavity aspect ratios. Since we
    are interested in a TM_{110} mode, we make: 
"""
m=1
n=2
kappa_0x = (m * np.pi) / a
    
kappa_0y = (n * np.pi) / b
    
mu_0 = (4.0 * np.pi) * 1e-7        # Vacuum permeability in H/m
    
def h_cx(omega, X, Y):
    h_x = (1j * kappa_0y / (omega * mu_0)) *\
            np.sin(kappa_0x * X) * np.cos(kappa_0y * Y)
    return h_x
    
def h_cy(omega, X, Y):    
    
    h_y = - (1j * kappa_0x / (omega * mu_0)) * \
            np.cos(kappa_0x * X) * np.sin(kappa_0y * Y)
            
    return h_y            
""" We can use the following parameters to plot the h_c field profile at 
    resonance as follows: 
"""
omega_c = 6.55 * 2 * np.pi * 1e9       # Angular cavity resonance frequency Hz
x = np.linspace(0, a, 1000)             # Create x, y grid for positions inside
y = np.linspace(0, b, 1000)             # the cavity
X, Y = np.meshgrid(x, y)
   
h_cx_plot = h_cx(omega_c, X, Y)         # evaluat h_cx at the x,y positions
h_cy_plot = h_cy(omega_c, X, Y)         # evaluat h_cy at the x,y positions
h_c_amplitude = np.abs(h_cx_plot) ** 2 + np.abs(h_cy_plot) ** 2 
""" Plot the amplitude of h_c as given in Figure 2(b)
""" 
plt.figure(1, figsize=(10, 10))
plt.rcParams['font.size'] = 25
plt.title('Figure 2(b) -- |h$_c$|$^2$')
extent = [ Y.min() * 1e3, Y.max() * 1e3, X.min() * 1e3, X.max() * 1e3]
plt.imshow(h_c_amplitude.transpose(), extent=extent, aspect = 'auto')
plt.xlabel('y (mm)')
plt.ylabel('x (mm)')
cbar = plt.colorbar()
cbar.set_ticks([])
plt.show()

x_anode=a/2
y_anode=b/2

Rs = 0.25  
eps_0 = 8.85e-12                         # Vacuum permittivity in F/m, 
V_s = 4.0/3.0 * np.pi * (Rs * 1e-3) ** 3 # Volume of a YIG sphere in m^3.

W_c = 0.5 * eps_0 * a * b * c           # Energy stored in an empty cavity
def W_p(h_cx):                           # Energy at sample position allowing
                                         # h_cx to change with position
   W_p = V_s * mu_0 * np.abs(h_cx) ** 2
   
   return W_p

def Wr(sampW, cavityW):

  Wr=(sampW/cavityW)
  return Wr

ratioW = Wr(W_p(h_cx(omega_c, x_anode, y_anode)),W_c)
print(ratioW)
#%%


def omega_a(omega_c, omega_0, omega_m, Wp, Wc):
    
    omega_a =  0.5 * (omega_c + omega_0 + \
                      np.sqrt((omega_c - omega_0) ** 2 + \
                              2 * omega_c * omega_m * Wp / Wc))
    return omega_a

def omega_b(omega_c, omega_0, omega_m, Wp, Wc):
    
    omega_b =  0.5 * (omega_c + omega_0 - \
                      np.sqrt((omega_c - omega_0) ** 2 + \
                              2 * omega_c * omega_m * Wp / Wc))
    return omega_b

""" We can define the stored energy in the empty cavity (Wc) and the energy at 
    the sample position/perturbation (Wp) as defined in page 6. We do
"""
eps_0 = 8.85e-12                         # Vacuum permittivity in F/m, 
gamma = 28 * 2.0 * np.pi * 1e9           # Gyromagnetic ratio in Hz/T,
Ms = 0.1758 / mu_0                       # Saturation Magnetisation in T, and
Rs = 0.25                                # Sample radius in mm -- change this  
                                         # for different sample sizes.
omega_m = gamma * mu_0 * Ms
V_s = 4.0/3.0 * np.pi * (Rs * 1e-3) ** 3 # Volume of a YIG sphere in m^3.

x_anode = a / 2.0                        # x and y positions at the anti-node 
y_anode = b/2                 # of the oscillating magnetic field h_c

W_c = 0.5 * eps_0 * a * b * c            # Energy stored in an empty cavity

def W_p(h_cx):                           # Energy at sample position allowing
                                         # h_cx to change with position
    W_p = V_s * mu_0 * np.abs(h_cx) ** 2
    
    return W_p
    
    
H_0 = np.linspace(0.172, 0.37, 100)   # Define a range for the bias field H_0
w0 = gamma * H_0                        # Ferromagnetic resonance is sphere

""" Evaluate the eigenfrequencies omega_a and omega_b at positions x_anode and 
    y-anode, and plot them as given in Figures 2(c)-(e).
""" 

wa_plot = omega_a(omega_c,w0,omega_m, W_p(h_cx(omega_c, x_anode, y_anode)),W_c)
wb_plot = omega_b(omega_c,w0,omega_m, W_p(h_cx(omega_c, x_anode, y_anode)),W_c)

W_p_new = 1.92311E-13          # In units of Joules
W_c_new = 2.30920E-08       # In units of Joules pre multiplied by 2

wa_plot = omega_a(omega_c,w0,omega_m, W_p_new, W_c_new)
wb_plot = omega_b(omega_c,w0,omega_m, W_p_new, W_c_new)

""" One could also comment lines 173 and 174 and uncomment lines 176 to 180. 
    This would allow using values for Wp and Wc from another source, such as
    comsol as opposed to those just calculated here.
""" 

plt.figure(2, figsize=(8, 10))
plt.rcParams['font.size'] = 25
plt.title('Figure 2(c)')
plt.plot(w0/(2 * np.pi * 1e9 ),wa_plot/(2 * np.pi * 1e9 ), 'r-', linewidth=2.0)
plt.plot(w0/(2 * np.pi * 1e9 ),wb_plot/(2 * np.pi * 1e9 ), 'r-', linewidth=2.0)
plt.xlim(6.4, 6.7)
plt.ylim(6.4, 6.7)
plt.xticks(np.arange(6.4, 6.75, 0.05))
plt.yticks(np.arange(6.4, 6.7, 0.05))
plt.xlabel("$\omega_0/2\pi$ (GHz)",)
plt.ylabel("$\omega/2\pi$ (GHz)",)
plt.tight_layout() 

print(w0)
om_a=omega_a(omega_c, w0, omega_m, W_p(h_cx(omega_c, x_anode, y_anode)), W_c)   
om_b=omega_b(omega_c, w0, omega_m, W_p(h_cx(omega_c, x_anode, y_anode)), W_c)  

print('w0')
print(w0)
print('wa')
print (om_a)
print('wb')
print( om_b)
#%% 
